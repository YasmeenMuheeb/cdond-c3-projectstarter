version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt-get install -y nodejs

  install_python:
    description: Install Python
    steps:
      - run:
          name: Install Python
          command: |
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --yes --update ppa:deadsnake/ppa
              sudo apt install python3

  install_npm:
    description: Install npm
    steps:
      - run:
          name: Install npm
          command: |
              sudo apt update
              sudo apt install nodejs npm
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            # Your code here
             aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1')
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
#            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Testing-frontend
          command: | 
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      # Docker image here
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Testing-Backend
          command: | 
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scanning Frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [fbackend-build]
      # Your job code here
      - run:
          name: Scanning Backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
               --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-*" \
            --output text >> .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
    - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["52:c0:05:1a:69:8f:6c:0a:04:cc:ed:73:ed:4b:1d:93"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend 
            touch .env
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> ".env"
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE= $TYPEORM_DATABASE >> ".env"
            cd ..
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml --private-key udacity.pem -vvv
      # Here's where you will add some code to rollback on failure 
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              #npm run start
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io 
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl --insecure https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
              fi
     # Here's where you will add some code to rollback on failure      
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      #- install_ansible
      #- install_nodejs
      #- install_python
      - run: 
          command: |
            yum -y update
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash - && yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-*" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["52:c0:05:1a:69:8f:6c:0a:04:cc:ed:73:ed:4b:1d:93"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache aws-cli
            apk add --update ansible
            apk add --update nodejs npm
            apk add --no-cache curl
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend 
            touch .env
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> ".env"
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE= $TYPEORM_DATABASE >> ".env"
            npm install
            npm --version
            npm run build
            cd ..
            # Zip the directory 
            tar -C backend -czvf artifact.tar.gz . 
            cp artifact.tar.gz .circleci/ansible/artifact.tar.gz
            cd .circleci/ansible
            ls -il
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  
  smoke-test:
    docker: 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache aws-cli
            apk add --update nodejs npm
            apk add --no-cache curl
      - run:
          name: Get backend url
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-*" --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # your code 
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-*" --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" 
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0 
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: 
            - build-frontend
      - test-backend: 
          requires: 
            - build-backend
      - scan-frontend: 
          requires: 
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure
      - configure-infrastructure: 
          requires: 
            - deploy-infrastructure
      - run-migrations: 
          requires: 
            - configure-infrastructure
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test: 
          requires: 
#            - deploy-frontend
            - deploy-backend
      


